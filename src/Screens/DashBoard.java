/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Screens;

import javax.swing.JOptionPane;
import Backend.Database_Configuration;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Panel;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.Vector;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mu409
 */
public class DashBoard extends javax.swing.JFrame {

    /**
     * Creates new form DashBoard
     */
    Database_Configuration db = new Database_Configuration();
    Connection conn;

    private int accountID;

    public DashBoard() {
        initComponents();
        enterImage();
    }

    public DashBoard(int accountID, String customerName, int balance) {
        initComponents();
        jOwnerName.setText(customerName);
        jBalance.setText(String.valueOf(balance));
        this.accountID = accountID;
        enterImage();
//        jCloseButton.setVisible(false);
//        jTableModel.setVisible(false);
    }

    public void enterImage() {
        ImageIcon icon = new ImageIcon(getClass().getResource("/pictures/Transaction History.jpg"));
        Image img = icon.getImage().getScaledInstance(jTransactionHistory.getWidth(), jTransactionHistory.getHeight(), Image.SCALE_SMOOTH);

        jTransactionHistory.setIcon(new ImageIcon(img));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDepositIcon = new javax.swing.JLabel();
        jDeposit = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jWithdrawIcon = new javax.swing.JLabel();
        jWithdraw = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTransferMoney = new javax.swing.JLabel();
        jDeleteIcon = new javax.swing.JLabel();
        jUpdateIcon = new javax.swing.JLabel();
        jDelete = new javax.swing.JLabel();
        jUpdate = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jOwnerName = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jBalance = new javax.swing.JLabel();
        jTransferMoneyIcon = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTransactionHistory = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDepositIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Deposit.jpg"))); // NOI18N
        jDepositIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDepositIconMouseClicked(evt);
            }
        });
        jPanel1.add(jDepositIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, 90));

        jDeposit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jDeposit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jDeposit.setText("Deposit");
        jDeposit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDepositMouseClicked(evt);
            }
        });
        jPanel1.add(jDeposit, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 280, 76, 25));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("DASHBOARD");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 272, 49));

        jWithdrawIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Withdraw.jpg"))); // NOI18N
        jWithdrawIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jWithdrawIconMouseClicked(evt);
            }
        });
        jPanel1.add(jWithdrawIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 121, 101));

        jWithdraw.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jWithdraw.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jWithdraw.setText("Withdraw");
        jWithdraw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jWithdrawMouseClicked(evt);
            }
        });
        jPanel1.add(jWithdraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 280, 69, 30));

        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, -1, 93));

        jTransferMoney.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTransferMoney.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTransferMoney.setText("Transfer Money");
        jTransferMoney.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTransferMoneyMouseClicked(evt);
            }
        });
        jPanel1.add(jTransferMoney, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 107, 30));

        jDeleteIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Delete.jpg"))); // NOI18N
        jDeleteIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDeleteIconMouseClicked(evt);
            }
        });
        jPanel1.add(jDeleteIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 121, 88));

        jUpdateIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Update.jpg"))); // NOI18N
        jUpdateIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jUpdateIconMouseClicked(evt);
            }
        });
        jPanel1.add(jUpdateIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 120, 79));

        jDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jDelete.setText("Delete Account");
        jDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDeleteMouseClicked(evt);
            }
        });
        jPanel1.add(jDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 94, 28));

        jUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jUpdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jUpdate.setText("Update Info");
        jUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jUpdateMouseClicked(evt);
            }
        });
        jPanel1.add(jUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 440, 82, 36));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 39, -1, 49));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Logout.jpg"))); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 20, 40, 40));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Icon.jpg"))); // NOI18N
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 40, 40));
        jPanel1.add(jOwnerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 150, 20));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setText("Balance : ");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 60, 20));
        jPanel1.add(jBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 120, 20));

        jTransferMoneyIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/TransferMoney.jpg"))); // NOI18N
        jTransferMoneyIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTransferMoneyIconMouseClicked(evt);
            }
        });
        jPanel1.add(jTransferMoneyIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 180, 110, 100));

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 60, 70, -1));

        jTransactionHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTransactionHistoryMouseClicked(evt);
            }
        });
        jPanel1.add(jTransactionHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 340, 110, 90));
        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Transaction History");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 450, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TODO add your handling code here:
        new Login().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jLabel13MouseClicked

    private boolean isTransferAccountExist(int accountID) {
        String query = "select * from accounts where account_id = ?;";
        boolean isAccountExist = false;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);

            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                isAccountExist = true;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isAccountExist;
    }

    private boolean addDataToFundTransferTable(int recieverAccountID, int amount) {

        String query = "insert into fundtransfers (sender_account_id,receiver_account_id,amount) values(?,?,?); ";
        boolean isInserted = false;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);
            ps.setInt(2, recieverAccountID);
            ps.setInt(3, amount);

            int rowsInserted = ps.executeUpdate();

            if (rowsInserted > 0) {
                isInserted = true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return isInserted;
    }

    private int getCurrentBalanceOfTransferAccount(int accountID) {
        String query = "select balance from accounts where account_id = ?;";
        int currentBalance = 0;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);

            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                currentBalance = rs.getInt("balance");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return currentBalance;
    }

    private boolean updatingBalanceOfTransferAccount(Connection myConn, int accountID, int amount, String transactionType) {

        String query = "update accounts set balance = ? where account_id = ?;";
        boolean isBalanceUpdated = false;
        try {
            conn = myConn;

            PreparedStatement ps = conn.prepareStatement(query);

            int currentBalanceOfTransferAccount = getCurrentBalanceOfTransferAccount(accountID);
            if (transactionType.equalsIgnoreCase("Deposit")) {
                ps.setInt(1, currentBalanceOfTransferAccount + amount);
            } else {
                ps.setInt(1, currentBalanceOfTransferAccount - amount);
            }

            ps.setInt(2, accountID);

            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                isBalanceUpdated = true;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isBalanceUpdated;
    }

    private void transferToAccount(int transferAccountID, int amount) {

        // adding amount to transfer account 
        if (insertIntoTransactionTable(db.getConnection(), amount, "Deposit")) {

            // updating balance of transfer account
            if (updatingBalanceOfTransferAccount(db.getConnection(), transferAccountID, amount, "Deposit")) {

                // now withdrawing amount from current account
                if (insertIntoTransactionTable(db.getConnection(), amount, "Transfer")) {

                    // now updating balance of current account in accounts table
                    if (updateBalanceInAccountsTable(db.getConnection(), amount, "Withdraw")) {

                        // now adding data into fund transfer table
                        if (addDataToFundTransferTable(transferAccountID, amount)) {

                            // now updating balance in GUI
                            updateBalanceInGUI(amount, "Transfer");

                        }

                    }
                }
            }

        }

    }

    private boolean updateBalanceInAccountsTable(Connection myConnection, int newAmount, String transactionType) {
        int currentBalance = Integer.parseInt(jBalance.getText());
        conn = myConnection;
        String query = "update accounts set balance = ? where account_id = ?;";
        boolean isUpdated = false;
        try {
            PreparedStatement ps = conn.prepareStatement(query);

            if (transactionType.equalsIgnoreCase("Deposit")) {
                ps.setInt(1, currentBalance + newAmount);
            } else {
                int balance = currentBalance - newAmount;
                System.out.println("Balance: " + balance);
                ps.setInt(1, balance);
            }
            ps.setInt(2, accountID);

            int rowsUpdated = ps.executeUpdate();

            if (rowsUpdated > 0) {
//                System.out.println("Balance updated in accounts table");
                isUpdated = true;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isUpdated;
    }

    private void updateBalanceInGUI(int newAmount, String transactionType) {

        int currentAmount = Integer.parseInt(jBalance.getText());
        if (transactionType.equalsIgnoreCase("Deposit")) {
            jBalance.setText(String.valueOf(newAmount + currentAmount));
        } else {
            jBalance.setText(String.valueOf(currentAmount - newAmount));
        }

    }

    private void updateNameGUI(String newName) {
        jOwnerName.setText(newName);
    }

    private boolean insertIntoTransactionTable(Connection myConnection, int amount, String transactionType) {
        String query = "insert into transactions (account_id,transaction_type,amount) values(?,?,?)";
        boolean isInserted = false;
        conn = myConnection;
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, accountID);
            ps.setString(2, transactionType);
            ps.setInt(3, amount);

            int rowsInserted = ps.executeUpdate();

            if (rowsInserted > 0) {
                System.out.println("transaction record inserted");
                isInserted = true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isInserted;
    }

    private boolean insertInToDeletedAccountsTable(String customerName) {

        String query = "insert into deletedaccounts (account_id,customer_name) values(?,?); ";
        boolean isInserted = false;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);
            ps.setString(2, customerName);

            int rowsInserted = ps.executeUpdate();

            if (rowsInserted > 0) {
                System.out.println("Account data inserted in deleted account table");
                isInserted = true;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isInserted;

    }

    private boolean deleteAccountFromAccountsTable() {

        String query = "delete from accounts where account_id  = ?;";
        boolean isDeleted = false;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, accountID);

            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Account " + accountID + " has been deleted.");
                isDeleted = true;
                new Login().setVisible(true);
                dispose();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Error: " + ex.getMessage());
        }

        return isDeleted;

    }

    private boolean deleteRecordsFromTransactionTable() {
        String query = "delete from transactions where account_id = ?;";
        boolean isDeleted = false;
        try {
            conn = db.getConnection();

            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);

            int rowsDeleted = ps.executeUpdate();

            if (rowsDeleted > 0) {
                System.out.println(rowsDeleted + " rows deleted.");
                isDeleted = true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return isDeleted;
    }

    //   Restriction on JFields that only digits enter in Pin and phone field
    private static JTextField createRestrictedTextFieldForDigit(boolean numericOnly, int maxLength) {
        JTextField textField = new JTextField(15);
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                String currentText = textField.getText();

                // Restrict input type
                if (numericOnly && !Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                } else if (!numericOnly && Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }

                // Restrict maximum length
                if (maxLength > 0 && currentText.length() >= maxLength && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });
        return textField;
    }

    private static JTextField createRestrictedTextFieldForText(boolean allowAlphabetsOnly, int maxLength) {
        JTextField textField = new JTextField(15);
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                String currentText = textField.getText();

                // Restrict input type
                if (allowAlphabetsOnly && !Character.isLetter(c) && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }

                // Restrict maximum length
                if (maxLength > 0 && currentText.length() >= maxLength && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });
        return textField;
    }

    private boolean deleteRecordsFromFundTransferTable() {

        String query = "delete from fundtransfers where sender_account_id=? or receiver_account_id=?;";

        try {
            conn = db.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);
            ps.setInt(2, accountID);

            int rowsDeleted = ps.executeUpdate();

            if (rowsDeleted > 0) {
                System.out.println("Rows deleted sucs from fundTransferTable for accountId " + accountID);
            }

        } catch (Exception e) {
            System.out.println("Error in deleteRecordsFromFundTransferTable");
            e.printStackTrace();

        }
        return true;
    }

    private String[] fetchingAccountData() {
        String query = "select  customer_name,address,pin,phone from accounts where account_id=?;";
        String[] data = new String[4];

        try {
            conn = db.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, accountID);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String pin = String.valueOf(rs.getString("pin"));
                String phoneNumber = String.valueOf(rs.getString("phone"));

                data[0] = rs.getString("customer_name");
                data[1] = rs.getString("address");
                data[2] = pin;
                data[3] = phoneNumber;

                System.out.println("Rows fetched sucs from accounts for accountId " + accountID);
            } else {
                System.out.println("Rows cannot fetched sucs from accounts for accountId " + accountID);
            }
        } catch (Exception e) {
            System.out.println("Error in data fetching method " + e.getMessage());
            e.printStackTrace();

        }
        return data;

    }

    private boolean validatingAccountInfoFields(String name, String address, String pin, String phone) {
        boolean condition = false;
        if (name.trim().isEmpty() == false && address.trim().isEmpty() == false && pin.trim().isEmpty() == false && phone.trim().isEmpty() == false) {
            condition = true;
        }

        return condition;
    }

    private void updateAccountInfoInDatabase(String name, String address, String pin, String phone) {

        String query = "update accounts set customer_name=? , address=? , pin=? , phone=? ;";

        try {
            conn = db.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);

            ps.setString(1, name);
            ps.setString(2, address);
            ps.setString(3, pin);
            ps.setString(4, phone);

            int rowsUpdated = ps.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Account info Updated in accounts table");

            }
        } catch (Exception e) {
            System.out.println("Error in updating info in accounts table for " + accountID);
        }
    }

    private void updateAccountInfo() {
        // Insano wala code likhi
        // Step 1: check whether the transferring amount is compatible with current amount
        // Step 2: check that transfer account exists or not
        // Step 3: 
        // Create a panel with two text fields for account ID and amount

        String[] data = fetchingAccountData();

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField accountIdField = new JTextField(data[0]);
        accountIdField.setText(String.valueOf(accountID));
        accountIdField.setEditable(false);

        //  Setting data in fields
        JTextField nameFiled = createRestrictedTextFieldForText(true, 15);
        nameFiled.setText(data[0]);

        JTextField addressFiled = createRestrictedTextFieldForText(true, 15);
        addressFiled.setText(data[1]);

        JTextField pinField = createRestrictedTextFieldForDigit(true, 4);
        pinField.setText(data[2]);

        JTextField phone_numberField = createRestrictedTextFieldForDigit(true, 11);
        phone_numberField.setText(data[3]);

        //  Adding Fields to panal
        panel.add(new JLabel("Account ID :"));
        panel.add(accountIdField);

        panel.add(new JLabel("Name :"));
        panel.add(nameFiled);

        panel.add(new JLabel("Address:"));
        panel.add(addressFiled);

        panel.add(new JLabel("Pin:"));
        panel.add(pinField);

        panel.add(new JLabel("Phone Number:"));
        panel.add(phone_numberField);

        // Show the input dialog with the custom panel
        int option = JOptionPane.showConfirmDialog(this, panel, "Account Info", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Check if OK button was pressed
        if (option == JOptionPane.OK_OPTION) {
            boolean condtion = validatingAccountInfoFields(nameFiled.getText(), addressFiled.getText(), pinField.getText(), phone_numberField.getText());

            if (condtion) {
                updateAccountInfoInDatabase(nameFiled.getText().trim(), addressFiled.getText().trim(), pinField.getText().trim(), phone_numberField.getText().trim());
                updateNameGUI(nameFiled.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Filed(s) can't be empty");
                updateAccountInfo();
            }

        }
    }


    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        // Insano wala code likhi
        // Step 1: check whether the transferring amount is compatible with current amount
        // Step 2: check that transfer account exists or not
        // Step 3: 
        // Create a panel with two text fields for account ID and amount
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField accountIdField = new JTextField(15);
        JTextField amountField = new JTextField(15);

        panel.add(new JLabel("Enter Transfer Account ID:"));
        panel.add(accountIdField);
        panel.add(new JLabel("Enter Amount:"));
        panel.add(amountField);

        // Show the input dialog with the custom panel
        int option = JOptionPane.showConfirmDialog(this, panel, "Enter Transfer Details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Check if OK button was pressed
        if (option == JOptionPane.OK_OPTION) {
            try {
                // Get the input values
                String transferAccountId = accountIdField.getText().trim();
                String amountString = amountField.getText().trim();

                // Validate inputs
                if (transferAccountId.isEmpty() || amountString.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parse the inputs
                int transferAccount = Integer.parseInt(transferAccountId);
                int amount = Integer.parseInt(amountString);

                if (isTransferAccountExist(transferAccount)) {
                    // Account Exists

                    int currentAmount = Integer.parseInt(jBalance.getText());

                    if (amount < currentAmount) {
                        // transfer amount is compaitble

                        transferToAccount(transferAccount, amount);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Insufficiet Amount (Aukat Me Reh)", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (NumberFormatException e) {
                // Handle invalid input for account ID or amount
                JOptionPane.showMessageDialog(this, "Invalid input! Please enter a valid number for both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jDepositIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDepositIconMouseClicked

        // Insano wala code likhi
//      db = new Database_Configuration();
        // Display an input dialog to get the amount from the user
        String input = JOptionPane.showInputDialog(
                this,
                "Please enter the amount:",
                "Amount Input",
                JOptionPane.PLAIN_MESSAGE
        );

        // Check if the user clicked OK (input is not null)
        if (input != null) {
            try {
                // Attempt to parse the input to a double
                int amount = Integer.parseInt(input);

                // Optional: Additional validation (e.g., positive amount)
                if (amount <= 0) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Please enter a positive amount.",
                            "Invalid Amount",
                            JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }

                // logic to handle the entered amount
                try {
                    conn = db.getConnection();
                    if (insertIntoTransactionTable(conn, amount, "Deposit")) {
                        // updating balance in accounts table
                        if (updateBalanceInAccountsTable(conn, amount, "Deposit")) {
                            System.out.println("Balance is updated in accounts table");

                            // now updating balance in GUI
                            updateBalanceInGUI(amount, "Deposit");
//                            db.closeConnection();
//                            db.closeResources();
                        } else {
                            System.out.println("Balance is not  updated in accounts table");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Amount did not deposit.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            } catch (NumberFormatException ex) {
                // Handle the case where the input is not a valid number
                JOptionPane.showMessageDialog(
                        this,
                        "Invalid input. Please enter a numeric value.",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_jDepositIconMouseClicked


    private void jWithdrawIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jWithdrawIconMouseClicked

        // Insano wala code likhi
//        db = new Database_Configuration();
        // Display an input dialog to get the amount from the user
        String input = JOptionPane.showInputDialog(
                this,
                "Please enter the amount:",
                "Amount Input",
                JOptionPane.PLAIN_MESSAGE
        );

        if (input != null) {

            try {
                int amount = Integer.parseInt(input);

                if (amount <= 0) {
                    JOptionPane.showMessageDialog(null, "Error: Please enter valid amount", "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int currentAmount = Integer.parseInt(jBalance.getText());

                if (currentAmount < amount) {

                    JOptionPane.showMessageDialog(null, "Error: Insufficient Amount ", "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                conn = db.getConnection();
                if (insertIntoTransactionTable(conn, amount, "Withdraw")) {
                    JOptionPane.showMessageDialog(null, "Withdraw Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (updateBalanceInAccountsTable(conn, amount, "Withdraw")) {
                        System.out.println("Balance updated in accounts table after withdrawing.");
                        updateBalanceInGUI(amount, "Withdraw");
                    } else {
                        System.out.println("Balance did not update after withdraw.");
                    }

                } else {
                    System.out.println("transaction record is not inserted for withdrawing.");
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }


    }//GEN-LAST:event_jWithdrawIconMouseClicked


    private void jDeleteIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDeleteIconMouseClicked

        // Insano wala code likhi
        // Step 1: Adding data to deleted Accounts table
        // Step 2: deleting records from transaction table
        // Step 3: Deleteing account from accounts table
        String[] options = new String[2];
        options[0] = "OK";
        options[1] = "Cancle";

        int response = JOptionPane.showConfirmDialog(
                null,
                "Do you want to delete the account?",
                "Delete Account",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.ERROR_MESSAGE
        );

        if (response == JOptionPane.OK_OPTION) {

            String query = "select customer_name from accounts where account_id = ?;";

            try {
                conn = db.getConnection();
                PreparedStatement ps = conn.prepareStatement(query);

                ps.setInt(1, accountID);

                ResultSet rs = ps.executeQuery();
                String customerName = "";
                if (rs.next()) {
                    customerName = rs.getString("customer_name");
                }

                // Step 1
                insertInToDeletedAccountsTable(customerName);

                // Step 2
                deleteRecordsFromTransactionTable();

                //Step 3
                deleteRecordsFromFundTransferTable();

                // Step 4
                deleteAccountFromAccountsTable();
//                        JOptionPane.showMessageDialog(null, "Account Deleted", "Information", JOptionPane.ERROR_MESSAGE);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jDeleteIconMouseClicked

    private void jUpdateIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jUpdateIconMouseClicked

        // Insano wala code Likhi
        updateAccountInfo();

    }//GEN-LAST:event_jUpdateIconMouseClicked

    private void jDepositMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDepositMouseClicked
        // TODO add your handling code here:

        // Insano wala code likhi
//      db = new Database_Configuration();
        // Display an input dialog to get the amount from the user
        String input = JOptionPane.showInputDialog(
                this,
                "Please enter the amount:",
                "Amount Input",
                JOptionPane.PLAIN_MESSAGE
        );

        // Check if the user clicked OK (input is not null)
        if (input != null) {
            try {
                // Attempt to parse the input to a double
                int amount = Integer.parseInt(input);

                // Optional: Additional validation (e.g., positive amount)
                if (amount <= 0) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Please enter a positive amount.",
                            "Invalid Amount",
                            JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }

                // logic to handle the entered amount
                try {
                    conn = db.getConnection();
                    if (insertIntoTransactionTable(conn, amount, "Deposit")) {
                        // updating balance in accounts table
                        if (updateBalanceInAccountsTable(conn, amount, "Deposit")) {
                            System.out.println("Balance is updated in accounts table");

                            // now updating balance in GUI
                            updateBalanceInGUI(amount, "Deposit");
//                            db.closeConnection();
//                            db.closeResources();
                        } else {
                            System.out.println("Balance is not  updated in accounts table");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Amount did not deposit.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            } catch (NumberFormatException ex) {
                // Handle the case where the input is not a valid number
                JOptionPane.showMessageDialog(
                        this,
                        "Invalid input. Please enter a numeric value.",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }

    }//GEN-LAST:event_jDepositMouseClicked

    private void jWithdrawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jWithdrawMouseClicked
        // TODO add your handling code here:

        // Insano wala code likhi
//        db = new Database_Configuration();
        // Display an input dialog to get the amount from the user
        String input = JOptionPane.showInputDialog(
                this,
                "Please enter the amount:",
                "Amount Input",
                JOptionPane.PLAIN_MESSAGE
        );

        if (input != null) {

            try {
                int amount = Integer.parseInt(input);

                if (amount <= 0) {
                    JOptionPane.showMessageDialog(null, "Error: Please enter valid amount", "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int currentAmount = Integer.parseInt(jBalance.getText());

                if (currentAmount < amount) {

                    JOptionPane.showMessageDialog(null, "Error: Insufficient Amount ", "Error Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                conn = db.getConnection();
                if (insertIntoTransactionTable(conn, amount, "Withdraw")) {
                    JOptionPane.showMessageDialog(null, "Withdraw Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (updateBalanceInAccountsTable(conn, amount, "Withdraw")) {
                        System.out.println("Balance updated in accounts table after withdrawing.");
                        updateBalanceInGUI(amount, "Withdraw");
                    } else {
                        System.out.println("Balance did not update after withdraw.");
                    }

                } else {
                    System.out.println("transaction record is not inserted for withdrawing.");
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jWithdrawMouseClicked

    private void jTransferMoneyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTransferMoneyMouseClicked
        // TODO add your handling code here:
        // Insano wala code likhi
        // Step 1: check whether the transferring amount is compatible with current amount
        // Step 2: check that transfer account exists or not
        // Step 3: 
        // Create a panel with two text fields for account ID and amount
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField accountIdField = new JTextField(15);
        JTextField amountField = new JTextField(15);

        panel.add(new JLabel("Enter Transfer Account ID:"));
        panel.add(accountIdField);
        panel.add(new JLabel("Enter Amount:"));
        panel.add(amountField);

        // Show the input dialog with the custom panel
        int option = JOptionPane.showConfirmDialog(this, panel, "Enter Transfer Details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Check if OK button was pressed
        if (option == JOptionPane.OK_OPTION) {
            try {
                // Get the input values
                String transferAccountId = accountIdField.getText().trim();
                String amountString = amountField.getText().trim();

                // Validate inputs
                if (transferAccountId.isEmpty() || amountString.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parse the inputs
                int transferAccount = Integer.parseInt(transferAccountId);
                int amount = Integer.parseInt(amountString);

                if (isTransferAccountExist(transferAccount)) {
                    // Account Exists

                    int currentAmount = Integer.parseInt(jBalance.getText());

                    if (amount < currentAmount) {
                        // transfer amount is compaitble

                        transferToAccount(transferAccount, amount);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Insufficiet Amount", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (NumberFormatException e) {
                // Handle invalid input for account ID or amount
                JOptionPane.showMessageDialog(this, "Invalid input! Please enter a valid number for both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTransferMoneyMouseClicked

    private void jTransferMoneyIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTransferMoneyIconMouseClicked
        // TODO add your handling code here:
        // Insano wala code likhi
        // Step 1: check whether the transferring amount is compatible with current amount
        // Step 2: check that transfer account exists or not
        // Step 3: 
        // Create a panel with two text fields for account ID and amount
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField accountIdField = new JTextField(15);
        JTextField amountField = new JTextField(15);

        panel.add(new JLabel("Enter Transfer Account ID:"));
        panel.add(accountIdField);
        panel.add(new JLabel("Enter Amount:"));
        panel.add(amountField);

        // Show the input dialog with the custom panel
        int option = JOptionPane.showConfirmDialog(this, panel, "Enter Transfer Details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Check if OK button was pressed
        if (option == JOptionPane.OK_OPTION) {
            try {
                // Get the input values
                String transferAccountId = accountIdField.getText().trim();
                String amountString = amountField.getText().trim();

                // Validate inputs
                if (transferAccountId.isEmpty() || amountString.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else if(transferAccountId.equalsIgnoreCase(String.valueOf(accountID))){
                    JOptionPane.showMessageDialog(null, "Error: You cannot transfer to yourself. Use deposit instead.","Error Message",JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parse the inputs
                int transferAccount = Integer.parseInt(transferAccountId);
                int amount = Integer.parseInt(amountString);

                if (isTransferAccountExist(transferAccount)) {
                    // Account Exists

                    int currentAmount = Integer.parseInt(jBalance.getText());

                    if (amount < currentAmount) {
                        // transfer amount is compaitble

                        transferToAccount(transferAccount, amount);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Insufficiet Amount", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Account Does't exist", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                // Handle invalid input for account ID or amount
                JOptionPane.showMessageDialog(this, "Invalid input! Please enter a valid number for both fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTransferMoneyIconMouseClicked

    private void jDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDeleteMouseClicked
        // TODO add your handling code here:

        // Insano wala code likhi
        // Step 1: Adding data to deleted Accounts table
        // Step 2: deleting records from transaction table
        // Step 3: Deleteing account from accounts table
        String query = "select customer_name from accounts where account_id = ?;";

        try {
            conn = db.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);

            ps.setInt(1, accountID);

            ResultSet rs = ps.executeQuery();
            String customerName = "";
            if (rs.next()) {
                customerName = rs.getString("customer_name");
            }

            // Step 1
            if (insertInToDeletedAccountsTable(customerName)) {

                // Step 2
                if (deleteRecordsFromTransactionTable()) {

                    // Step 3
                    if (deleteAccountFromAccountsTable()) {
                        JOptionPane.showMessageDialog(null, "Account Deleted", "Information", JOptionPane.ERROR_MESSAGE);

                    } else {
                        System.out.println("Account is not deleted from accounts table");
                    }
                }

            } else {
                System.out.println("Account is not inserted in deleted accounts table.");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jDeleteMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        db.closeResources();
        db.closeConnection();
        new Login().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jUpdateMouseClicked
        // TODO add your handling code here:
        updateAccountInfo();
    }//GEN-LAST:event_jUpdateMouseClicked

    private DefaultTableModel fetchTransactionData() {
        String query = "SELECT transaction_id, transaction_type, amount, timestamp FROM transactions WHERE account_id = ?";
        Vector<String> columnNames = new Vector<>();
        columnNames.add("Transaction ID");
        columnNames.add("Transaction Type");
        columnNames.add("Amount");
        columnNames.add("Timestamp");

        Vector<Vector<Object>> data = new Vector<>();

        try {
            conn = db.getConnection();
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, accountID);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getInt("transaction_id"));
                row.add(rs.getString("transaction_type"));
                row.add(rs.getDouble("amount"));
                row.add(rs.getTimestamp("timestamp"));
                data.add(row);
            }
        } catch (Exception ex) {
            System.out.println("Error in fetchTransactionData: " + ex.getMessage());
        }

        return new DefaultTableModel(data, columnNames);
    }

    private void jTransactionHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTransactionHistoryMouseClicked
        // TODO add your handling code here:
        // Step 1: Fetch Account Data
        // Step 2: Show Dialog Box
        // Step 3: Show table in Dialog Box
        
        
        
        
        // Step 1: Fetch Transaction Data
        DefaultTableModel tableModel = fetchTransactionData();

        // Step 2: Create and Show Dialog Box
        JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Transaction History", true);
        dialog.setSize(600, 400);
        dialog.setLayout(new BorderLayout());

        // Step 3: Create JTable and Add to Dialog
        JTable table = new JTable(tableModel);
        dialog.add(new JScrollPane(table), BorderLayout.CENTER);

        // Add a Close Button
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> dialog.dispose());
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(closeButton);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        // Show the Dialog
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

    }//GEN-LAST:event_jTransactionHistoryMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        
         // TODO add your handling code here:
        // Step 1: Fetch Account Data
        // Step 2: Show Dialog Box
        // Step 3: Show table in Dialog Box
        
        
        
        
        // Step 1: Fetch Transaction Data
        DefaultTableModel tableModel = fetchTransactionData();

        // Step 2: Create and Show Dialog Box
        JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Transaction History", true);
        dialog.setSize(600, 400);
        dialog.setLayout(new BorderLayout());

        // Step 3: Create JTable and Add to Dialog
        JTable table = new JTable(tableModel);
        dialog.add(new JScrollPane(table), BorderLayout.CENTER);

        // Add a Close Button
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> dialog.dispose());
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(closeButton);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        // Show the Dialog
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

    }//GEN-LAST:event_jLabel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jBalance;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jDelete;
    private javax.swing.JLabel jDeleteIcon;
    private javax.swing.JLabel jDeposit;
    private javax.swing.JLabel jDepositIcon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jOwnerName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jTransactionHistory;
    private javax.swing.JLabel jTransferMoney;
    private javax.swing.JLabel jTransferMoneyIcon;
    private javax.swing.JLabel jUpdate;
    private javax.swing.JLabel jUpdateIcon;
    private javax.swing.JLabel jWithdraw;
    private javax.swing.JLabel jWithdrawIcon;
    // End of variables declaration//GEN-END:variables
}
